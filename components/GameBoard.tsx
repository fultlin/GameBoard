import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 */
interface GameBoardProps {
  board: number[][];
  onCellPress: (row: number, col: number) => void;
  editable: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è 10x10
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π –∏ —Å—Ç—Ä–µ–ª—å–±—ã
 */
export default function GameBoard({ board, onCellPress, editable }: GameBoardProps) {
  // –ë—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
  const columnLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è –∫–ª–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const getCellStyle = (cellValue: number) => {
    switch (cellValue) {
      case 1: return styles.shipCell;      // –ö–æ—Ä–∞–±–ª—å
      case 2: return styles.hitCell;       // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
      case 3: return styles.missCell;      // –ü—Ä–æ–º–∞—Ö
      default: return styles.emptyCell;    // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    }
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–ª–µ—Ç–∫–µ
   */
  const getCellSymbol = (cellValue: number) => {
    switch (cellValue) {
      case 2: return 'üí•'; // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
      case 3: return '‚ö¨';  // –ü—Ä–æ–º–∞—Ö
      default: return '';
    }
  };

  return (
    <View style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–±—É–∫–≤—ã) */}
      <View style={styles.row}>
        <View style={styles.cornerCell} />
        {columnLabels.map((label) => (
          <View key={label} style={styles.headerCell}>
            <Text style={styles.headerText}>{label}</Text>
          </View>
        ))}
      </View>

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å —Å—Ç—Ä–æ–∫–∞–º–∏ */}
      {board.map((row, rowIndex) => (
        <View key={rowIndex} style={styles.row}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (—Ü–∏—Ñ—Ä–∞) */}
          <View style={styles.headerCell}>
            <Text style={styles.headerText}>{rowIndex + 1}</Text>
          </View>

          {/* –ö–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */}
          {row.map((cell, colIndex) => (
            <TouchableOpacity
              key={colIndex}
              style={[styles.cell, getCellStyle(cell)]}
              onPress={() => onCellPress(rowIndex, colIndex)}
              disabled={!editable && cell !== 0}
            >
              <Text style={styles.cellText}>{getCellSymbol(cell)}</Text>
            </TouchableOpacity>
          ))}
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    borderWidth: 1,
    borderColor: '#C7C7CC',
    backgroundColor: '#FFFFFF',
    borderRadius: 4,
    padding: 8,
  },
  row: {
    flexDirection: 'row',
  },
  cornerCell: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerCell: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#000',
  },
  cell: {
    width: 30,
    height: 30,
    borderWidth: 1,
    borderColor: '#C7C7CC',
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyCell: {
    backgroundColor: '#E3F2FD',
  },
  shipCell: {
    backgroundColor: '#78909C',
  },
  hitCell: {
    backgroundColor: '#FFCDD2',
  },
  missCell: {
    backgroundColor: '#E3F2FD',
  },
  cellText: {
    fontSize: 14,
    fontWeight: 'bold',
  },
});